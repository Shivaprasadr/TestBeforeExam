name: Daily AWS SAA-C03 Questions Sync

on:
  schedule:
    # Run daily at 6:00 AM UTC (adjust timezone as needed)
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual triggering
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: 'false'

env:
  SOURCE_REPO: 'Iamrushabhshahh/AWS-Certified-Solutions-Architect-Associate-SAA-C03-Exam-Dump-With-Solution'
  NODE_VERSION: '18'

jobs:
  sync-aws-questions:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout TestBeforeExam repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm init -y
        npm install axios cheerio pdf-parse

    - name: Create temp directory
      run: mkdir -p temp-aws-sync

    - name: Check for updates in source repository
      id: check-updates
      run: |
        # Get the latest commit hash from source repository
        LATEST_COMMIT=$(curl -s "https://api.github.com/repos/${{ env.SOURCE_REPO }}/commits/main" | jq -r '.sha')
        echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
        
        # Check if we have a record of the last synced commit
        if [ -f ".last-aws-sync" ]; then
          LAST_SYNCED=$(cat .last-aws-sync)
          echo "last_synced=$LAST_SYNCED" >> $GITHUB_OUTPUT
          
          if [ "$LATEST_COMMIT" = "$LAST_SYNCED" ] && [ "${{ github.event.inputs.force_update }}" != "true" ]; then
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "No updates found in source repository"
          else
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "Updates found in source repository"
          fi
        else
          echo "needs_update=true" >> $GITHUB_OUTPUT
          echo "First time sync - proceeding with import"
        fi

    - name: Download source files
      if: steps.check-updates.outputs.needs_update == 'true'
      run: |
        # Download the answers/solutions file
        curl -L "https://raw.githubusercontent.com/${{ env.SOURCE_REPO }}/main/AWS%20SAA-03%20Solution.txt" \
          -o "temp-aws-sync/aws-solutions.txt"
        
        echo "✅ Downloaded source files"

    - name: Parse and convert questions
      if: steps.check-updates.outputs.needs_update == 'true'
      run: |
        # Run our custom parser
        node tools/data-importers/aws-saa-c03-importer.js
        
        echo "✅ Parsed and converted questions"

    - name: Validate generated JSON
      if: steps.check-updates.outputs.needs_update == 'true'
      run: |
        # Validate all generated JSON files against our schema
        for file in data/subjects/cloud-computing/aws/*.json; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            node -e "
              const fs = require('fs');
              const data = JSON.parse(fs.readFileSync('$file', 'utf8'));
              console.log('✅ Valid JSON:', '$file');
            "
          fi
        done

    - name: Update content index
      if: steps.check-updates.outputs.needs_update == 'true'
      run: |
        # Update the main content index
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          // Read existing index or create new one
          let mainIndex = {};
          const indexPath = 'data/index.json';
          
          if (fs.existsSync(indexPath)) {
            mainIndex = JSON.parse(fs.readFileSync(indexPath, 'utf8'));
          }
          
          // Read AWS index
          const awsIndexPath = 'data/subjects/cloud-computing/aws/index.json';
          if (fs.existsSync(awsIndexPath)) {
            const awsIndex = JSON.parse(fs.readFileSync(awsIndexPath, 'utf8'));
            
            // Update main index
            mainIndex.lastUpdated = new Date().toISOString();
            mainIndex.subjects = mainIndex.subjects || {};
            mainIndex.subjects['cloud-computing'] = mainIndex.subjects['cloud-computing'] || {};
            mainIndex.subjects['cloud-computing']['aws'] = {
              examTypes: ['AWS-SAA-C03'],
              totalQuestions: awsIndex.totalQuestions,
              topics: awsIndex.topics,
              lastSync: awsIndex.lastUpdated
            };
            
            // Calculate total questions across all subjects
            let totalQuestions = 0;
            for (const subject of Object.values(mainIndex.subjects)) {
              for (const topic of Object.values(subject)) {
                totalQuestions += topic.totalQuestions || 0;
              }
            }
            mainIndex.totalQuestions = totalQuestions;
            
            fs.writeFileSync(indexPath, JSON.stringify(mainIndex, null, 2));
            console.log('✅ Updated main content index');
          }
        "

    - name: Generate jsDelivr URLs
      if: steps.check-updates.outputs.needs_update == 'true'
      run: |
        # Create a URLs file for jsDelivr access
        node -e "
          const fs = require('fs');
          const baseUrl = 'https://cdn.jsdelivr.net/gh/${{ github.repository }}@main';
          
          const urls = {
            baseUrl: baseUrl,
            lastUpdated: new Date().toISOString(),
            endpoints: {
              mainIndex: baseUrl + '/data/index.json',
              awsIndex: baseUrl + '/data/subjects/cloud-computing/aws/index.json',
              questionFiles: []
            }
          };
          
          // Add all AWS question files
          const awsDir = 'data/subjects/cloud-computing/aws';
          if (fs.existsSync(awsDir)) {
            const files = fs.readdirSync(awsDir);
            for (const file of files) {
              if (file.endsWith('.json') && file !== 'index.json') {
                urls.endpoints.questionFiles.push({
                  name: file,
                  url: baseUrl + '/data/subjects/cloud-computing/aws/' + file
                });
              }
            }
          }
          
          fs.writeFileSync('data/cdn-urls.json', JSON.stringify(urls, null, 2));
          console.log('✅ Generated jsDelivr URLs');
        "

    - name: Commit and push changes
      if: steps.check-updates.outputs.needs_update == 'true'
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add changes
        git add data/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Get current date for commit message
          CURRENT_DATE=$(date -u +"%Y-%m-%d")
          
          # Count new/updated questions
          QUESTION_COUNT=$(find data/subjects/cloud-computing/aws -name "*-questions.json" -exec jq '[.[] | select(.metadata.importDate == "'$CURRENT_DATE'")] | length' {} \; | awk '{sum += $1} END {print sum}')
          
          # Commit changes
          git commit -m "Daily AWS SAA-C03 sync: $CURRENT_DATE
          
          - Updated AWS Solutions Architect Associate questions
          - Imported/updated $QUESTION_COUNT questions
          - Source: ${{ env.SOURCE_REPO }}
          - Commit: ${{ steps.check-updates.outputs.latest_commit }}
          - Auto-generated by GitHub Actions"
          
          # Push changes
          git push
          
          echo "✅ Committed and pushed changes"
        fi
        
        # Update last sync record
        echo "${{ steps.check-updates.outputs.latest_commit }}" > .last-aws-sync
        git add .last-aws-sync
        git commit -m "Update sync record" || echo "No sync record changes"
        git push || echo "No sync record to push"

    - name: Create summary
      if: steps.check-updates.outputs.needs_update == 'true'
      run: |
        echo "## 📊 Daily AWS SAA-C03 Sync Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "**Source Repository:** ${{ env.SOURCE_REPO }}" >> $GITHUB_STEP_SUMMARY
        echo "**Latest Commit:** ${{ steps.check-updates.outputs.latest_commit }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count questions by topic
        echo "### 📚 Question Count by Topic" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for file in data/subjects/cloud-computing/aws/*-questions.json; do
          if [ -f "$file" ]; then
            TOPIC=$(basename "$file" -questions.json)
            COUNT=$(jq 'length' "$file")
            echo "- **$TOPIC:** $COUNT questions" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 jsDelivr CDN URLs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Main Index:** https://cdn.jsdelivr.net/gh/${{ github.repository }}@main/data/index.json" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS Index:** https://cdn.jsdelivr.net/gh/${{ github.repository }}@main/data/subjects/cloud-computing/aws/index.json" >> $GITHUB_STEP_SUMMARY
        echo "- **CDN URLs:** https://cdn.jsdelivr.net/gh/${{ github.repository }}@main/data/cdn-urls.json" >> $GITHUB_STEP_SUMMARY

    - name: No updates message
      if: steps.check-updates.outputs.needs_update == 'false'
      run: |
        echo "## ℹ️ No Updates Required" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** Source repository has no new commits since last sync" >> $GITHUB_STEP_SUMMARY
        echo "**Last Synced Commit:** ${{ steps.check-updates.outputs.last_synced }}" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        rm -rf temp-aws-sync
        echo "✅ Cleanup completed"