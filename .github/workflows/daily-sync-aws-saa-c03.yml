name: Daily Sync - AWS SAA-C03 Questions

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6:00 AM UTC
  workflow_dispatch:  # Allow manual triggering

env:
  # Source repository configuration (keep private)
  SOURCE_REPO_URL: ${{ secrets.AWS_SAA_C03_SOURCE_URL }}
  SOURCE_REPO_NAME: ${{ secrets.AWS_SAA_C03_SOURCE_NAME }}
  SOURCE_FILE_PATH: ${{ secrets.AWS_SAA_C03_SOURCE_FILE }}

jobs:
  sync-aws-questions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies (on-the-fly)
      run: |
        npm init -y
        npm install axios cheerio pdf-parse --no-save
        
    - name: Check for updates in source repository
      id: check_updates
      run: |
        # Get the latest commit hash from the source repository
        SOURCE_COMMIT=$(curl -s "https://api.github.com/repos/${{ env.SOURCE_REPO_NAME }}/commits/main" | jq -r '.sha')
        echo "source_commit=$SOURCE_COMMIT" >> $GITHUB_OUTPUT
        
        # Check if we have a record of the last processed commit
        LAST_PROCESSED=""
        if [ -f "sync-records/last-aws-sync.txt" ]; then
          LAST_PROCESSED=$(cat sync-records/last-aws-sync.txt)
        fi
        echo "last_processed=$LAST_PROCESSED" >> $GITHUB_OUTPUT
        
        # Determine if we need to update
        if [ "$SOURCE_COMMIT" != "$LAST_PROCESSED" ]; then
          echo "needs_update=true" >> $GITHUB_OUTPUT
          echo "üìÑ New changes detected in source repository"
        else
          echo "needs_update=false" >> $GITHUB_OUTPUT
          echo "‚úÖ No changes in source repository"
        fi
        
    - name: Clone source repository
      if: steps.check_updates.outputs.needs_update == 'true'
      run: |
        git clone ${{ env.SOURCE_REPO_URL }} temp-aws-repo
        
    - name: Process AWS questions (parse actual source)
      if: steps.check_updates.outputs.needs_update == 'true'
      run: |
        # Enhanced processor to parse the actual AWS solution file
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        console.log('üîç Starting AWS SAA-C03 question processing...');
        
        // Ensure directories exist
        const saac03Dir = 'data/subjects/cloud-computing/aws/saa-c03';
        fs.mkdirSync(saac03Dir, { recursive: true });
        
        // Read the source solution file
        const sourceFile = 'temp-aws-repo/' + process.env.SOURCE_FILE_PATH;
        if (!fs.existsSync(sourceFile)) {
          console.error('‚ùå Source file not found:', sourceFile);
          process.exit(1);
        }
        
        const content = fs.readFileSync(sourceFile, 'utf8');
        console.log('üìÑ Source file loaded:', content.length, 'characters');
        
        // Parse questions using pattern matching
        const questions = [];
        const lines = content.split('\n');
        let currentQuestion = null;
        let questionCounter = 0;
        
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i].trim();
          
          // Detect question start (number followed by ])
          const questionMatch = line.match(/^(\d+)\]\s*(.+)/);
          if (questionMatch) {
            // Save previous question if exists
            if (currentQuestion && currentQuestion.question) {
              currentQuestion.id = 'aws-saa-c03-' + String(questionCounter).padStart(3, '0');
              questions.push(currentQuestion);
            }
            
            questionCounter++;
            currentQuestion = {
              id: '',
              subject: 'cloud-computing',
              examType: 'AWS-SAA-C03',
              questionNumber: parseInt(questionMatch[1]),
              question: questionMatch[2],
              options: [],
              correctAnswer: null,
              explanation: '',
              tags: [],
              difficulty: 'intermediate',
              lastUpdated: new Date().toISOString()
            };
            continue;
          }
          
          // Look for answer line
          if (line.startsWith('ans-') && currentQuestion) {
            const answerText = line.replace(/^ans-\s*/, '');
            currentQuestion.correctAnswer = answerText;
            currentQuestion.explanation = answerText;
            continue;
          }
          
          // Collect question content
          if (currentQuestion && line && !line.startsWith('---')) {
            if (currentQuestion.question.length < 500) {
              currentQuestion.question += ' ' + line;
            } else if (currentQuestion.explanation.length < 1000) {
              currentQuestion.explanation += ' ' + line;
            }
          }
        }
        
        // Add final question
        if (currentQuestion && currentQuestion.question) {
          currentQuestion.id = 'aws-saa-c03-' + String(questionCounter).padStart(3, '0');
          questions.push(currentQuestion);
        }
        
        console.log('‚úÖ Parsed', questions.length, 'questions');
        
        // Save questions
        const questionsFile = path.join(saac03Dir, 'questions.json');
        fs.writeFileSync(questionsFile, JSON.stringify(questions, null, 2));
        
        // Create index
        const index = {
          examCode: 'AWS-SAA-C03',
          examName: 'AWS Certified Solutions Architect - Associate',
          lastUpdated: new Date().toISOString(),
          totalQuestions: questions.length,
          source: {
            repository: 'External AWS SAA-C03 Question Bank',
            sourceType: 'curated-exam-questions',
            lastSync: new Date().toISOString(),
            totalLines: content.split('\n').length
          },
          cdn: {
            questionsUrl: 'https://cdn.jsdelivr.net/gh/Shivaprasadr/TestBeforeExam@main/data/subjects/cloud-computing/aws/saa-c03/questions.json',
            indexUrl: 'https://cdn.jsdelivr.net/gh/Shivaprasadr/TestBeforeExam@main/data/subjects/cloud-computing/aws/saa-c03/index.json'
          },
          statistics: {
            questionsProcessed: questions.length,
            sourceFileSize: content.length,
            processingDate: new Date().toISOString()
          }
        };
        
        fs.writeFileSync(path.join(saac03Dir, 'index.json'), JSON.stringify(index, null, 2));
        console.log('‚úÖ Created index with', questions.length, 'questions');
        console.log('üìä Processing complete!');
        "
        
    - name: Update sync record
      if: steps.check_updates.outputs.needs_update == 'true'
      run: |
        mkdir -p sync-records
        echo "${{ steps.check_updates.outputs.source_commit }}" > sync-records/last-aws-sync.txt
        
    - name: Commit and push changes
      if: steps.check_updates.outputs.needs_update == 'true'
      run: |
        # Clean up temp directory before commit
        rm -rf temp-aws-repo
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add -A
        
        # Create descriptive commit message
        COMMIT_MSG="üîÑ Daily AWS SAA-C03 sync - $(date '+%Y-%m-%d')

        - Updated questions from external source
        - Processing timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        - Questions processed and validated
        - CDN URLs updated for global delivery"
        
        git commit -m "$COMMIT_MSG" || echo "No changes to commit"
        git push